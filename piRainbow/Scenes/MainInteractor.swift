//
//  MainInteractor.swift
//  piRainbow
//
//  Created by Antonio Gonzalez Hidalgo on 23/05/2020.
//  Copyright (c) 2020 Antonio Gonzalez Hidalgo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic {
  func getPiNumbers(request: Main.PiNumbers.Request)
}

protocol MainDataStore {
}

class MainInteractor: MainBusinessLogic, MainDataStore {

  var presenter: MainPresentationLogic?
  var piDeliveryWorker = PiDeliveryWorker(store: PiDeliveryStore())
  var bufferComponent: String = ""

  // MARK: MainBusinessLogic

  func getPiNumbers(request: Main.PiNumbers.Request) {

    piDeliveryWorker.getPiNumbers(start: request.start, numberOfDigits: request.numberOfDigits) { (result) in
      switch result {
      case .success(result: let piResponse):

        guard let piContent = piResponse.content else { return }
        let content = self.bufferComponent + piContent
        var components = content.getPiComponents()
        if let last = components.last, last < 25 {
          self.bufferComponent = String(format: "%.0f", last)
          components.removeLast()
        } else {
          self.bufferComponent = ""
        }
        print("components: \(components) buffer: \(self.bufferComponent)")

        let response = Main.PiNumbers.Response(components: components)
        self.presenter?.presentPiComponents(response: response)

      case .failure:
        break
      }
    }

  }

}
